class TNode {
  int data;
  TNode? left;
  TNode? right;

  TNode(this.data);
}

class BinarySearchTree {
  TNode? root;

  void insert(int value) {
    root = _insertRecursive(root, value);
  }

  TNode? _insertRecursive(TNode? node, int value) {
    if (node == null) {
      return TNode(value);
    }

    if (value < node.data) {
      node.left = _insertRecursive(node.left, value);
    } else {
      node.right = _insertRecursive(node.right, value);
    }

    return node;
  }

  void inorderTraversal(TNode? node) {
    if (node != null) {
      inorderTraversal(node.left);
      print(node.data);
      inorderTraversal(node.right);
    }
  }

  /// Method untuk menyalin tree
  TNode? copyTree(TNode? t) {
    if (t == null) {
      return null;
    }

    TNode newNode = TNode(t.data);
    newNode.left = copyTree(t.left);
    newNode.right = copyTree(t.right);
    return newNode;
  }
}

void main() {
  BinarySearchTree originalTree = BinarySearchTree();
  List<int> values = [30, 15, 17, 36, 67, 30, 69];

  // Insert ke tree asli
  for (var val in values) {
    originalTree.insert(val);
  }

  print("In-order Traversal Tree Asli:");
  originalTree.inorderTraversal(originalTree.root);

  // Copy tree
  BinarySearchTree copiedTree = BinarySearchTree();
  copiedTree.root = originalTree.copyTree(originalTree.root);

  print("\nIn-order Traversal Tree Hasil Salinan:");
  copiedTree.inorderTraversal(copiedTree.root);
}
